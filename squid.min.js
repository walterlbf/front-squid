document.addEventListener("DOMContentLoaded", function () {
  // Código que será executado quando o navegador carregar

});

async function fetchPhots() {
  const request = await fetch('https://us-central1-squid-apis.cloudfunctions.net/test-front-basic');
  const response = await request.json();
  return response;
};

const newTagPhoto = (_id, link, comentarios, criadoEm, upvotes, height, width, url, username) => {
  const isoData = new Date(criadoEm);
  const newTagA = document.createElement('a');
  const divPhoto = document.createElement('div');
  const newImg = document.createElement('img');
  const divInfo = document.createElement('div');

  const pComentario = document.createElement('p');
  const coment = document.createTextNode('comentarios: ' + comentarios);
  pComentario.appendChild(coment);
  const pUsername = document.createElement('p');
  const user = document.createTextNode('@' + username);
  pUsername.appendChild(user);
  const pLikes = document.createElement('p');
  const likes = document.createTextNode('linkes: ' + upvotes);
  pLikes.appendChild(likes);
  const pCriadoEm = document.createElement('p');
  const data = document.createTextNode('data: ' + isoData);
  pCriadoEm.appendChild(data);

  newTagA.href = link;
  newTagA.target = "_blank";
  newImg.src = url;
  newImg.width = width;
  newImg.height = height;
  newImg.className = 'object-contain';
  document.getElementById('feed').appendChild(divPhoto);
  divPhoto.appendChild(newImg);
  // divPhoto.appendChild(newTagA);
  // newTagA.appendChild(divInfo);
  divPhoto.className = "foto";
  divInfo.className = "info";

  divPhoto.appendChild(divInfo);
  divInfo.appendChild(newTagA);
  newTagA.appendChild(pUsername);
  newTagA.appendChild(pLikes);
  newTagA.appendChild(pComentario);
  newTagA.appendChild(pCriadoEm);


  // divInfo.appendChild(pUsername);
  // divInfo.appendChild(pLikes);
  // divInfo.appendChild(pComentario);


};

const mapPhotos = (getPhotos) => {
  console.log(getPhotos)
  getPhotos.map(({ _id, link, comentarios, criadoEm, upvotes, usuario: { username }, imagens: { thumbnail: { height, width, url } } }) => {
    newTagPhoto(_id, link, comentarios, criadoEm, upvotes, height, width, url, username);
  });

};

window.onload = async function () {
  const getPhotos = await fetchPhots();
  await mapPhotos(getPhotos);
};
